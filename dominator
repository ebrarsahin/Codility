An array A consisting of N integers is given. The dominator of array A is the value that occurs in more than half of the elements of A.

For example, consider array A such that

 A[0] = 3    A[1] = 4    A[2] =  3
 A[3] = 2    A[4] = 3    A[5] = -1
 A[6] = 3    A[7] = 3
The dominator of A is 3 because it occurs in 5 out of 8 elements of A (namely in those with indices 0, 2, 4, 6 and 7) and 5 is more than a half of 8.

Write a function

def solution(A)

that, given an array A consisting of N integers, returns index of any element of array A in which the dominator of A occurs. The function should return âˆ’1 if array A does not have a dominator.

For example, given array A such that

 A[0] = 3    A[1] = 4    A[2] =  3
 A[3] = 2    A[4] = 3    A[5] = -1
 A[6] = 3    A[7] = 3
the function may return 0, 2, 4, 6 or 7, as explained above.
'''
import statistics

def solution (a):
  mode =0
  for i in range (0,len(a)):
    if a[i] == statistics.mode(a):
      mode +=1
      index=a.index(a[i])
  
  if mode > len(a)/2 :
    return index
  else:
    return -1
'''

#solution 2
from collections import Counter

def solution(a):
    l = len(a)
    if (l==0): 
        return -1

    c = Counter(a)    
    d = c.most_common(1)[0][1] # dominator
    e = c.most_common(1)[0][0] # element
    if (d<=l//2):
        # not dominator
        return -1
    else:
        # d is dominator
        if (e in a):
            return a.index(e)
